import org.gradle.plugins.ide.eclipse.model.SourceFolder

description = 'Procentive 2.0'

apply plugin: 'base'

project(':audit-worker')
project(':core')
project(':entity-designer') 
project(':form-designer') 
project(':persistence-worker') 
project(':widget-designer') 
project(':workflow-designer') 
project(':workflow-worker') 

allprojects {
	group = 'com.procentive'
	task hello << { task -> println "I'm $task.project.name" }

	repositories {
		mavenCentral()
		maven { url "http://repo.springsource.org/release" }
		maven { url "http://repo.spring.io/milestone" }
		maven { url 'http://repo.springsource.org/libs-release'}
		maven { url "http://repo.spring.io/libs-snapshot" }
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = gradleWrapperVersion
}

task listProjects << {
	subprojects.each { project ->
		project.allprojects.each {
			println it.name
			println "  $it.tasks \n $rootProject.name "
		}
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'groovy'
	
	// place output where java classes go so as to sync with Eclipse
	processResources.destinationDir = file("$buildDir/classes/main")
	compileTestJava.destinationDir = file("$buildDir/classes/test")
	processTestResources.destinationDir = file("$buildDir/classes/test")

	sourceCompatibility = 1.6
	targetCompatibility = 1.6
  
	configurations {
		runtime {
			exclude(group: 'org.slf4j', module: 'log4j-over-slf4j')
			exclude(group: 'org.slf4j', module: 'jcl-over-slf4j')
			exclude(group: 'org.slf4j', module: 'jul-to-slf4j')
		}
	}
	
	dependencies {
		compile group:'commons-lang',         name:'commons-lang',       version:commonsLangVersion
		compile group:'org.codehaus.jackson', name:'jackson-mapper-asl', version:jacksonVersion
		compile group:'org.codehaus.groovy',  name:'groovy-all',         version:groovyVersion
		compile group:'org.springframework',  name:'spring-core',        version:springVersion
		compile group:'org.springframework',  name:'spring-context',     version:springVersion
		compile group:'ch.qos.logback',       name:'logback-classic',    version:logbackVersion
		compile 'org.aspectj:aspectjrt:1.8.1'
		compile 'org.springframework.amqp:spring-rabbit:1.3.5.RELEASE'
		
		runtime 'org.springframework:spring-aop:$springVersion'
		runtime 'org.aspectj:aspectjweaver:1.8.1'
		
		testCompile group:'junit',               name:'junit',       version:junitVersion
		testCompile group:'org.springframework', name:'spring-test', version:springVersion
		testCompile group:'org.mockito',         name:'mockito-all', version:mockitoVersion
	}
	
//	test {
//		exclude '**/*IntegrationTest.class'
//	}

	eclipse {
		classpath {
			downloadSources=true
			downloadJavadoc=true
			file {
				beforeMerged { classpath ->
					classpath.entries.clear()
				}
				whenMerged {  cp ->
					cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/main/") }*.output = "build/classes/main"
					cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/") }*.output = "build/classes/test"
					cp.entries.removeAll { it.kind == "output" }
				}
			}
		}
	}

	eclipse.project {
		natures 'org.eclipse.swt.common.project.facet.core.nature', 'org.eclipse.wst.common.modulecore.ModuleCoreNature'
		natures += 'org.springframework.ide.eclipse.core.springnature'
		buildCommand 'org.eclipse.wst.common.project.facet.core.builder'
		buildCommand 'org.eclipse.wst.validation.validationBuilder'
	}
}